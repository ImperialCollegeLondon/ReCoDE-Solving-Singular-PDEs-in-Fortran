- ### Step 4:
  We then add a second equation for $v$:
       $$\epsilon A_1(x) \frac{\partial^2 u}{\partial x^2}+B_1(x) \frac{\partial u}{\partial x}+C_1(x) u + F(u,v) = D_1(x), \quad  A_2(x) \frac{\partial^2 v}{\partial x^2}+B_2(x) \frac{\partial v}{\partial x}+C_2(x) u + G(u,v) = D_2(x). $$ This is easy to implement with finite differences: if our discretised solution was originally $u = (u(x_1),u(x_2),...,u(x_n))$ then the new discretised solution gets written in the form $u = (u(x_1),v(x_1),u(x_2),v(x_2),...,u(x_n),v(x_n)).$

  This is achieved by defining an additional equation in `equations/definition.f90`. Then in the module `equations.f90` we modify the operators already defined by the subroutine `build_the_matrix` in the subroutine `equation_setup`. This highlights the modular nature of the code.

- ### Step 5:
  Include a second spatial domain $y$:
       $$\epsilon A_1(x,y) (\frac{\partial^2 u}{\partial x^2}+\frac{\partial^2 u}{\partial y^2}) + C_1(x,y) u + F(u,v) = D_1(x,y), \quad  A_2(x,y) (\frac{\partial^2 v}{\partial x^2}+\frac{\partial^2 v}{\partial y^2}) + C_2(x,y) v + G(u,v) = D_2(x,y).$$ We have dropped the first derivatives here for simplicity. The new matrix is built using Kronecker products: for the interested reader we recommend the book "Finite Difference Methods for Ordinary and Partial Differential Equations" by Randall J. LeVeque.

  Importantly, this is again achieved in a modular way: the new operators are constructed in `equations/2D.f90`. We built copies of the subroutines `equation_setup`, `build_the_matrix` and `non_linear_setup` and constructed the two-dimensional variants `equation_setup2D`, `build_the_matrix2D` and `non_linear_setup2D`. The logic of both sets of subroutines are similar - expect the new use of the Kroncker prodcut in `equation_setup2D`. As an extension it is possible to combine these subroutines - however, we decieded to improve readability by keeping them seperate.

  We modify the `solve_bvp.f90` module to print the solution into `BVP_2D.f90` and domains `BVP_2Dx.f90` and `BVP_2Dv.f90`.
    
